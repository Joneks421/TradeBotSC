from datetime import time
import threading
import schedule
from config import TICKERS
from utils import get_token
from analysis import analyze_stock
from ml_forecast import predict_stock_price
from chart import send_stock_chart, send_extended_chart
from trend_classifier import classify_trend
import telebot
import logging
import pandas as pd

api_allowed = {}
pending_indicators = {}

def reset_api_flag(chat_id):
    api_allowed[chat_id] = True
    return schedule.CancelJob

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

threading.Thread(target=run_schedule, daemon=True).start()
logging.basicConfig(level=logging.INFO)
bot = telebot.TeleBot(get_token())
pending_analysis = {}
pending_chart = {}

def get_ticker_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(ticker) for ticker in TICKERS]
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(commands=['indicators'])
def start_indicators(message):
    chat_id = message.chat.id
    pending_indicators[chat_id] = "waiting_for_ticker"
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_ticker_keyboard())

@bot.message_handler(func=lambda message: message.text in TICKERS and message.chat.id in pending_indicators and pending_indicators[message.chat.id] == "waiting_for_ticker")
def select_indicators_ticker(message):
    chat_id = message.chat.id
    ticker = message.text
    pending_indicators[chat_id] = ticker
    period_keyboard = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    period_buttons = [telebot.types.KeyboardButton(p) for p in ["1m", "3m", "6m", "1y", "5y"]]
    period_buttons.append(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥"))
    period_keyboard.add(*period_buttons)
    bot.send_message(chat_id, f"–¢–∏–∫–µ—Ä *{ticker}* –≤—ã–±—Ä–∞–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", parse_mode='Markdown', reply_markup=period_keyboard)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥" and message.chat.id in pending_indicators)
def indicators_go_back(message):
    chat_id = message.chat.id
    pending_indicators[chat_id] = "waiting_for_ticker"
    bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–∫–µ—Ä–∞:", reply_markup=get_ticker_keyboard())

@bot.message_handler(func=lambda message: message.text in ["1m", "3m", "6m", "1y", "5y"] and message.chat.id in pending_indicators and pending_indicators[message.chat.id] != "waiting_for_ticker")
def select_indicators_period(message):
    chat_id = message.chat.id
    period = message.text
    ticker = pending_indicators.pop(chat_id)
    bot.send_message(chat_id, f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è *{ticker}* –∑–∞ –ø–µ—Ä–∏–æ–¥ *{period}*...", parse_mode='Markdown', reply_markup=get_ticker_keyboard())
    try:
        data = analyze_stock(ticker, period)
        close = data["Close"]
        if isinstance(close, pd.DataFrame):
            close = close.iloc[:, 0]
        rsi = data['RSI_14'].iloc[-1]
        sma50 = data['SMA_50'].iloc[-1]
        sma200 = data['SMA_200'].iloc[-1]
        sma20 = data['SMA_20'].iloc[-1]
        bb_upper = data['BB_Upper'].iloc[-1]
        bb_lower = data['BB_Lower'].iloc[-1]
        macd = data['MACD'].iloc[-1]
        indicators_text = (
            f"üìä *–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {ticker}*:\n"
            f"‚Ä¢ *RSI (14)*: {rsi:.2f}\n"
            f"‚Ä¢ *SMA 50*: ${sma50:.2f}\n"
            f"‚Ä¢ *SMA 200*: ${sma200:.2f}\n"
            f"‚Ä¢ *SMA 20*: ${sma20:.2f}\n"
            f"‚Ä¢ *BB –í–µ—Ä—Ö–Ω—è—è*: ${bb_upper:.2f}\n"
            f"‚Ä¢ *BB –ù–∏–∂–Ω—è—è*: ${bb_lower:.2f}\n"
            f"‚Ä¢ *MACD*: {macd:.2f}"
        )
        bot.send_message(chat_id, indicators_text, parse_mode='Markdown')
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['start'])
def start_analysis(message):
    chat_id = message.chat.id
    if chat_id in pending_chart:
        pending_chart.pop(chat_id)
    pending_analysis[chat_id] = "waiting_for_ticker"
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_ticker_keyboard())

@bot.message_handler(commands=['chart'])
def start_chart(message):
    chat_id = message.chat.id
    if chat_id in pending_analysis:
        pending_analysis.pop(chat_id)
    pending_chart[chat_id] = "waiting_for_ticker"
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=get_ticker_keyboard())

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def go_back(message):
    chat_id = message.chat.id
    if chat_id in pending_analysis:
        pending_analysis[chat_id] = "waiting_for_ticker"
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_ticker_keyboard())
    elif chat_id in pending_chart:
        pending_chart[chat_id] = "waiting_for_ticker"
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=get_ticker_keyboard())
    else:
        pending_analysis[chat_id] = "waiting_for_ticker"
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_ticker_keyboard())

@bot.message_handler(func=lambda message: message.text in TICKERS)
def process_ticker(message):
    chat_id = message.chat.id
    ticker = message.text
    if chat_id in pending_chart and pending_chart[chat_id] == "waiting_for_ticker":
        pending_chart[chat_id] = ticker
        period_keyboard = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        period_buttons = [telebot.types.KeyboardButton(p) for p in ["1m", "6m", "1y"]]
        period_buttons.append(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥"))
        period_keyboard.add(*period_buttons)
        bot.send_message(chat_id, f"–¢–∏–∫–µ—Ä {ticker} –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=period_keyboard)
    elif chat_id in pending_analysis and pending_analysis[chat_id] == "waiting_for_ticker":
        pending_analysis[chat_id] = ticker
        period_keyboard = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        period_buttons = [telebot.types.KeyboardButton(p) for p in ["1m", "3m", "6m", "1y", "5y"]]
        period_buttons.append(telebot.types.KeyboardButton("–ù–∞–∑–∞–¥"))
        period_keyboard.add(*period_buttons)
        bot.send_message(chat_id, f"–¢–∏–∫–µ—Ä {ticker} –≤—ã–±—Ä–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=period_keyboard)

@bot.message_handler(func=lambda message: message.text in ["1m", "3m", "6m", "1y", "5y"] and message.chat.id in pending_analysis and pending_analysis[message.chat.id] != "waiting_for_ticker")
def select_analysis_period(message):
    chat_id = message.chat.id
    if not api_allowed.get(chat_id, True):
        bot.send_message(chat_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.")
        return
    api_allowed[chat_id] = False
    schedule.every(10).seconds.do(reset_api_flag, chat_id)
    period = message.text
    ticker = pending_analysis.pop(chat_id)
    bot.send_message(chat_id, f"üîé –ê–Ω–∞–ª–∏–∑ {ticker} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period} –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    try:
        data = analyze_stock(ticker, period)
        close = data["Close"]
        if isinstance(close, pd.DataFrame):
            close = close.iloc[:, 0]
        if len(close) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω.")
        last_price = float(close.iloc[-1])
        prev_close = float(close.iloc[-2])
        price_diff = last_price - prev_close
        percent_change = (last_price / prev_close - 1) * 100
        sign = "+" if price_diff >= 0 else ""
        volatility_warning = ""
        if len(close) >= 14:
            last_14 = close.tail(14)
            avg_deviation = (last_14 - last_14.mean()).abs().mean()
            mean_last14 = last_14.mean()
            relative_volatility = float((avg_deviation / mean_last14) * 100)
            if relative_volatility > 2.0:
                volatility_warning = f"\n‚ö†Ô∏è *–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å*: {relative_volatility:.2f}%"
        signal_text = (
            f"üìä *–ê–Ω–∞–ª–∏–∑ {ticker}*:\n"
            f"üìà *–¶–µ–Ω–∞*: *${last_price:.2f}*\n"
            f"üî∫ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å*: {sign}{percent_change:.2f}% ({sign}${abs(price_diff):.2f})"
            f"{volatility_warning}"
        )
        bot.send_message(chat_id, signal_text, parse_mode='Markdown')
        predicted_price = predict_stock_price(ticker)
        forecast_text = f"\nüîÆ *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞*: ${predicted_price:.2f}"
        bot.send_message(chat_id, forecast_text, parse_mode='Markdown')
        trend = classify_trend(ticker)
        trend_text = f"\nüìä *–¢—Ä–µ–Ω–¥*: {trend}"
        bot.send_message(chat_id, trend_text, parse_mode='Markdown')
        send_stock_chart(ticker, chat_id)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞")
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text in ["1m", "6m", "1y"] and message.chat.id in pending_chart and pending_chart[message.chat.id] != "waiting_for_ticker")
def select_chart_period(message):
    chat_id = message.chat.id
    period = message.text
    ticker = pending_chart.pop(chat_id)
    bot.send_message(chat_id, f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ {ticker} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}. –û–∂–∏–¥–∞–π—Ç–µ...")
    try:
        send_extended_chart(ticker, chat_id, period)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")
@bot.message_handler(commands=['help'])
def show_help(message):
    chat_id = message.chat.id
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –≤—ã–±—Ä–∞—Ç—å —Ç–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "/chart - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫\n"
        "/forecast - –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã\n"
        "/trend - –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞\n"
        "/indicators - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    bot.send_message(chat_id, help_text)
if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ polling")
